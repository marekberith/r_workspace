data <- data %>% pivot_wider(names_from = Skill, values_from = Value) %>%
filter(str_detect(player_positions, 'CM')) %>%
select(wage_eur, preferred_foot, skill_dribbling, skill_curve)
library('tidyverse')
library('tidymodels')
library('magrittr')
library('ggplot2')
library('ggfortify')
data <- read.csv('data/Practicum.4.2.csv')
data <- data %>% pivot_wider(names_from = Skill, values_from = Value) %>%
filter(str_detect(player_positions, 'CM')) %>%
select(wage_eur, preferred_foot, skill_dribbling, skill_curve)
data_temp <- data
data_temp$preferred_foot <- as.integer(as.factor(data$preferred_foot))
pairs(data_temp)
cor(data_temp)
tidymodels_prefer() # resolve package conflicts using tidy models methods
data(ames)
view(ames)
ames$Sale_Price
hist(ames$Sale_Price)
hist(ames$Sale_Price, freq = F)
hist(ames$Sale_Price, freq = F, prob = T)
hist(log(ames$Sale_Price, 10), freq = F)
hist(ames$Sale_Price)
plot(ames$Sale_Price)
autoplot(ames$Sale_Price)
qnorm(ames$Sale_Price)
qqnorm(ames$Sale_Price)
qqline()
qqline(ames$Sale_Price)
qqline(log(ames$Sale_Price, 10))
qqnorm(log(ames$Sale_Price, 10))
qqline(log(ames$Sale_Price, 10))
qqnorm(log(ames$Sale_Price, 100))
qqline(log(ames$Sale_Price, 100))
qqnorm(log(ames$Sale_Price, 100))
qqnorm(log(ames$Sale_Price, 10))
qqline(log(ames$Sale_Price, 10))
qqnorm(log(ames$Sale_Price, 2))
qqline(log(ames$Sale_Price, 2))
qqnorm(log(ames$Sale_Price, 20))
qqline(log(ames$Sale_Price, 20))
qqnorm(log(ames$Sale_Price, 10))
qqline(log(ames$Sale_Price, 10))
hist(log(ames$Sale_Price, 10), freq = F)
hist(log(ames$Sale_Price, 10), freq = F)
hist(log(ames$Sale_Price, 10))
hist(log(ames$Sale_Price, 10), freq = F)
set.seed(27)
ames_split <- initial_split(ames, 0.80)
ames_split
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
ames_train
ames_test
data <- read.csv('data/Practicum.5.1.csv')
data
View(data)
cleaned_data <- data %>%
pivot_wider(names_from = Area_SF, values_from = Value_SF)
cleaned_data
view(cleaned_data)
cleaned_data <- mutate(cleaned_data, total_SF = Total_Bsmt_SF + First_Flr_SF + Second_Flr_SF + Open_Porch_SF)
cleaned_data
cleaned_data %<>% mutate(total_SF = Total_Bsmt_SF + First_Flr_SF + Second_Flr_SF + Open_Porch_SF)
cleaned_data
library(ggplot2)
ggplot(cleaned_data, mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point()
ggplot(cleaned_data, mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
ggplot(cleaned_data[cleaned_data$Sale_Price<7500], mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
ggplot(cleaned_data[cleaned_data$Sale_Price<7500, ], mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
ggplot(cleaned_data[, cleaned_data$Sale_Price<7500], mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
ggplot(cleaned_data[cleaned_data$Sale_Price<7500, ], mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
ggplot(cleaned_data[cleaned_data$Sale_Price < 7500], mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
ggplot(cleaned_data[, cleaned_data$Sale_Price < 7500], mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
cccc <- cleaned_data[cleaned_data$Sale_Price < 7500, ]
ggplot(cccc, mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
cccc
cleaned_data
ggplot(cleaned_data, mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
ggplot(cleaned_data[cleaned_data$total_SF < 7500, ], mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
hist(cleaned_data$total_SF)
# show without outliers to see how total_SF affects price
ggplot(cleaned_data[cleaned_data$total_SF < 7500, ], mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
hist(cleaned_data$Sale_Price)
qqnorm(cleaned_data$Sale_Price)
qqline(cleaned_data$Sale_Price)
qqnorm(cleaned_data$Sale_Price)
hist(cleaned_data$Sale_Price)
qqnorm(cleaned_data$Sale_Price)
qqline(cleaned_data$Sale_Price)
cleaned_data <- log10(cleaned_data)
cleaned_data$Sale_Price <- log10(cleaned_data$Sale_Price)
hist(cleaned_data$Sale_Price)
qqnorm(cleaned_data$Sale_Price)
qqline(cleaned_data$Sale_Price)
cleaned_data
pairs(cleaned_data)
cleaned_data_temp <- cleaned_data
cleaned_data_temp$Overall_Cond <- as.integer(as.factor(cleaned_data$Overall_Cond))
pairs(cleaned_data)
pairs(cleaned_data_temp)
cor(cleaned_data_temp)
cleaned_data_temp <- cleaned_data
cleaned_data_temp$Overall_Cond <- as.factor(cleaned_data$Overall_Cond)
cleaned_data_temp$Overall_Cond
cleaned_data %>% select(Sale_Price, total_SF, as.integer(as.factor(Overall_Cond))) %>%
pairs()
cleaned_data %>% select(Sale_Price, total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
pairs()
cleaned_data %>% select(Sale_Price, total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
cor()
temp <- cleaned_data
temp$Overall_Cond <- as.factor(temp$Overall_Cond)
temp$Overall_Cond
temp$Overall_Cond <- as.integer(atemp$Overall_Cond, levels=c('Very_Poor', 'Poor', 'Below_Average', 'Fair', 'Average', 'Above_Average', 'Good', 'Very_Good', 'Excellent')
)
temp$Overall_Cond <- as.integer(atemp$Overall_Cond, levels=c('Very_Poor', 'Poor', 'Below_Average', 'Fair', 'Average', 'Above_Average', 'Good', 'Very_Good', 'Excellent')
)
temp$Overall_Cond <- as.integer(temp$Overall_Cond, levels=c('Very_Poor', 'Poor', 'Below_Average', 'Fair', 'Average', 'Above_Average', 'Good', 'Very_Good', 'Excellent')
)
temp %>% select(Sale_Price, total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
pairs()
temp %>% select(Sale_Price, total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
cor()
temp
temp %>% select(Sale_Price, total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
pairs()
temp %>% select(Sale_Price, total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
cor()
temp %>% select(Sale_Price, total_SF, Overall_Cond) %>%
pairs()
temp %>% select(Sale_Price, total_SF, Overall_Cond) %>%
cor()
cleaned_data %>% select(Sale_Price, total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
pairs()
cleaned_data %>% select(Sale_Price, total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
cor()
data <- read.csv('data/Practicum.5.1.csv')
cleaned_data <- data %>%
pivot_wider(names_from = Area_SF, values_from = Value_SF)
cleaned_data %<>% mutate(Total_SF = Total_Bsmt_SF + First_Flr_SF + Second_Flr_SF + Open_Porch_SF)
cleaned_data
library(ggplot2)
# show without outliers to see how total_SF affects price
ggplot(cleaned_data[cleaned_data$total_SF < 7500, ], mapping = aes(x = total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
# show without outliers to see how total_SF affects price
ggplot(cleaned_data[cleaned_data$Total_SF < 7500, ], mapping = aes(x = Total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
data <- cleaned_data
#-----Preprocessing-----
data %<>%
mutate(Overall_Cond = as_factor(Overall_Cond))
panel.cor <- function(x,y, digits=2, prefix="", cex.cor){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0,1,0,1))
r <- abs(cor(x,y,use="complete.obs"))
txt <- format(c(r,0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt,sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}
panel.hist <- function(x, ...){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2],0,1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="white",...)
}
panel.lm <- function(x,y,col = par("col"), bg = NA, pch = par("pch"),
cex = 1, col.smooth = "steelblue",...){
points(x,y,pch=pch, col=col, bg=bg, cex=cex)
abline(stats::lm(x ~ y), col = "steelblue", ...)
}
#-----Pair Plotting/Grammar of Graphics Facets-----
data %$%
pairs( ~ Total_SF + Overall_Cond + Sale_Price,
upper.panel= panel.cor,
diag.panel=panel.hist,
lower.panel=panel.smooth)
cleaned_data %>% select(Sale_Price, Total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
pairs()
cleaned_data_split <- initial_split(cleaned_data, 0.8)
cleaned_data_split <- initial_split(cleaned_data, 0.8)
cleaned_data_train <- training(cleaned_data_split)
cleaned_data_test <- testing(cleaned_data_split)
library('parsnip')
help(parsnip)
help(set_engine)
linear_reg() %>% set_engine('lm') %>% translate()
linear_reg() %>% set_engine('lm')
model <- linear_reg() %>% set_engine('lm') %>% translate()
model <- linear_reg() %>% set_engine('lm')
model
cleaned_data_train
trained_model <- model %>% fit(Sale_Price ~ Total_SF + Overall_Cond, cleaned_data_train)
trained_model
summary(trained_model)
tidy(trained_model)
summary(tidy(trained_model))
tidy(trained_model)
trained_model
tidy(trained_model)
data <- read.csv('data/Practicum.5.1.csv')
data <- read.csv('data/Practicum.5.1.csv')
cleaned_data <- data %>%
pivot_wider(names_from = Area_SF, values_from = Value_SF)
cleaned_data %<>% mutate(Total_SF = Total_Bsmt_SF + First_Flr_SF + Second_Flr_SF + Open_Porch_SF)
cleaned_data
# show without outliers to see how total_SF affects price
ggplot(cleaned_data[cleaned_data$Total_SF < 7500, ], mapping = aes(x = Total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
cleaned_data$Sale_Price <- log10(cleaned_data$Sale_Price)
hist(cleaned_data$Sale_Price)
qqnorm(cleaned_data$Sale_Price)
qqline(cleaned_data$Sale_Price)
cleaned_data %>% select(Sale_Price, Total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
pairs()
cleaned_data %>% select(Sale_Price, Total_SF, Overall_Cond) %>%
mutate(Overall_Cond = as.integer(as.factor(Overall_Cond))) %>%
cor()
cleaned_data_split <- initial_split(cleaned_data, 0.8)
cleaned_data_train <- training(cleaned_data_split)
cleaned_data_test <- testing(cleaned_data_split)
library('parsnip')
model <- linear_reg() %>% set_engine('lm')
trained_model <- model %>% fit(Sale_Price ~ Total_SF + Overall_Cond, cleaned_data_train)
tidy(trained_model)
class(trained_model)
predict(trained_model, cleaned_data_test)
trained_model
cleaned_data_test
cleaned_data_test %>% select(Sale_Price) %>%
mutate(predicted = predict(trained_model, cleaned_data_test))
cleaned_data_test %>% select(Sale_Price) %>%
mutate(predicted = predict(trained_model, cleaned_data_test), residuals = Sale_Price - predict(trained_model, cleaned_data_test))
qqplot(trained_model)
qqplot(trained_model$fit)
autoplot(trained_model)
cleaned_data_train
cleaned_data_train[cleaned_data_train$ID = 1625,]
cleaned_data_train[cleaned_data_train$ID == 1625,]
# show without outliers to see how total_SF affects price
ggplot(cleaned_data[cleaned_data$Total_SF < 7500, ], mapping = aes(x = Total_SF, y = Sale_Price)) +
geom_point() +
geom_smooth()
autoplot(trained_model)
cleaned_data_train[cleaned_data_train$ID %in% c(1625, 1149),]
cleaned_data_train[!cleaned_data_train$ID %in% c(1625, 1149),]
cleaned_data_train[!cleaned_data_train$ID %in% c(1625, 1149, 83),]
cleaned_data_train[!cleaned_data_train$ID %in% c(1625, 1149, 2280),]
cleaned_data_test %>% select(Sale_Price) %>%
mutate(predicted = predict(trained_model, cleaned_data_test),
residuals = Sale_Price - predict(trained_model, cleaned_data_test))
glm()
data <- read.csv('data/Default.csv')
view(data)
help(if)
data
data$student[data$student == 0,]
data$student[data$student == 'No',]
data$student[data$student == 'No']
data$student <- data$student[data$student == 'No'] = 0
data
data$student[data$student == 'No'] <- 0
data
data$default <- ifelse(data$default == 'No', 0, 1)
data
data$student <- ifelse(data$student == 'No', 0, 1)
data
data$student
data <- read.csv('data/Default.csv')
data$default <- ifelse(data$default == 'No', 0, 1)
data$student <- ifelse(data$student == 'No', 0, 1)
data$student
data
hist(data$balance)
hist(data$income)
hist(data$balance)
qqnorm(data$balance)
qqline(data$balance)
qqnorm(data$balance[data$balance != 0])
qqline(data$balance[data$balance != 0])
data$ID <- 1:length(data)
data
length(data)
length(data$default)
data
row_number(data)
data$ID <- 1:length(data$default)
data
data %<>% select(ID, everything())
data
library(ggplot2)
ggplot(data, mapping = aes(balance)) +
geom_histogram()
ggplot(data, mapping = aes(balance)) +
geom_histogram() +
scale_fill_discrete(name = "default")
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram() +
scale_fill_discrete(name = "default")
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(position = 'identity') +
scale_fill_discrete(name = "default")
ggplot(data, aes(x = balance, fill = default)) +
geom_histogram(binwidth = 0.5, position = "identity", alpha = 0.5) +
scale_fill_manual(values = c("#619CFF", "#FF6666")) +
labs(x = "Value", y = "Count", fill = "Default")
ggplot(data, aes(x = balance, fill = default)) +
geom_histogram(position = "identity", alpha = 0.5) +
scale_fill_manual(values = c("#619CFF", "#FF6666")) +
labs(x = "Value", y = "Count", fill = "Default")
data <- read.csv('data/Default.csv')
data$default <- as.factor(ifelse(data$default == 'No', 0, 1))
data$default
data$student <- as.factor(ifelse(data$student == 'No', 0, 1))
hist(data$balance)
hist(data$income)
qqnorm(data$balance[data$balance != 0])
qqline(data$balance[data$balance != 0])
data$ID <- 1:length(data$default)
data %<>% select(ID, everything())
data
library(ggplot2)
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(position = 'identity') +
scale_fill_discrete(name = "default")
ggplot(data, mapping = aes(balance)) +
geom_histogram(position = 'identity') +
scale_fill_discrete(name = "default")
, fill = default
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(position = 'identity') +
scale_fill_discrete(name = "default")
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(position = 'identity')
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram()
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(alpha=0.6)
hist(data$balance)
hist(data$income)
hist(data$balance)
hist(log10(data$balance))
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(alpha=0.6)
plot(data)
autoplot(data)
ggplot(data, mapping = aes(balance, fill = default)) +
geom_smooth(alpha=0.6)
ggplot(data, mapping = aes(balance, fill = default)) +
geom_dotplot(alpha=0.6)
ggplot(data, mapping = aes(balance, fill = default)) +
geom_point(alpha=0.6)
ggplot(data, mapping = aes(default, balance, fill = default)) +
geom_point(alpha=0.6)
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(alpha=0.6)
autoplot(data)
plot(data)
ggplot(data, mapping = aes(default, balance, fill = default)) +
geom_point(alpha=0.6)
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(alpha=0.6)
autoplot(data)
summary(data$balance)
summary(data[data$default == 1,]$balance)
summary(data[data$default == 0,]$balance)
model <- glm(default ~ balance, data, family = 'binomial')
model
summary(model)
plot(model)
autoplot(model)
class(model)
view(model)
View(model)
model$coefficients
fit(model, data)
model$fitted.values
view(model$fitted.values)
data
data$predicted_default <- ifelse(model$fitted.values > 0.5, 1, 0)
data
data[data$predicted_default]
data[data$predicted_default,]
data[data$predicted_default == 1,]
new_data <- predict(model, newdata = tibble(balance = c(1000,1300,1700,2000,3000)))
new_data
new_data <- predict(model, newdata = tibble(balance = c(1000,1300,1700,2000,3000)), type = 'response')
new_data
type(new_data)
class(new_data)
new_data
ifelse(new_data > 0.8, 'defaulter', 'non-defaulter')
ifelse(new_data > 0.6, 'defaulter', 'non-defaulter')
ifelse(new_data > 0.6, 1, 0)
names(new_data) <- c(1000,1300,1700,2000,3000)
new_da
new_data
ifelse(new_data > 0.6, 'defaulter', 'non-defaulter')
ifelse(new_data > 0.6, 1, 0)
library(tidymodels)
library(tidyverse)
library(magrittr)
data <- read.csv('data/Default.csv')
view(data)
data$default <- as.factor(ifelse(data$default == 'No', 0, 1))
data$student <- as.factor(ifelse(data$student == 'No', 0, 1))
data
hist(log10(data$balance))
hist(data$income)
qqnorm(data$balance[data$balance != 0])
qqline(data$balance[data$balance != 0])
data$ID <- 1:length(data$default)
data %<>% select(ID, everything())
data
library(ggplot2)
#toto je daco
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(alpha=0.6)
autoplot(data)
ifelse(new_data > 0.6, 1, 0)
model.prediction
data <- read.csv('data/Default.csv')
data$default <- as.factor(ifelse(data$default == 'No', 0, 1))
data$student <- as.factor(ifelse(data$student == 'No', 0, 1))
data$ID <- 1:length(data$default)
data %<>% select(ID, everything())
library(ggplot2)
#toto je daco
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(alpha=0.6)
ggplot(data, mapping = aes(default, balance, fill = default)) +
geom_point(alpha=0.6)
model <- glm(default ~ balance, data, family = 'binomial')
model
summary(model)
view(model$fitted.values)
# here we can use any value as decision rule -> default 0.5
data$predicted_default <- ifelse(model$fitted.values > 0.5, 1, 0)
model.prediction
confusionMatrix(as_factor(data$predicted_default), as_factor(data$default), positive = "1")
library(caret)
install.packages('caret')
library(caret)
confusionMatrix(as_factor(data$predicted_default), as_factor(data$default), positive = "1")
data$predicted_default <- ifelse(model$fitted.values > 0.3, 1, 0)
confusionMatrix(as_factor(data$predicted_default), as_factor(data$default), positive = "1")
data$predicted_default <- ifelse(model$fitted.values > 0.2, 1, 0)
confusionMatrix(as_factor(data$predicted_default), as_factor(data$default), positive = "1")
data$predicted_default <- ifelse(model$fitted.values > 0.0, 1, 0)
confusionMatrix(as_factor(data$predicted_default), as_factor(data$default), positive = "1")
data$predicted_default <- ifelse(model$fitted.values > 0.001, 1, 0)
confusionMatrix(as_factor(data$predicted_default), as_factor(data$default), positive = "1")
ggplot(data, mapping = aes(balance, fill = predicted_default)) +
geom_histogram(alpha=0.6)
data
ggplot(data, mapping = aes(balance, fill = predicted_default)) +
geom_histogram(alpha=0.6)
#toto je daco
ggplot(data, mapping = aes(balance, fill = default)) +
geom_histogram(alpha=0.6)
ggplot(data, mapping = aes(balance, fill = as_factor(predicted_default))) +
geom_histogram(alpha=0.6)
data$predicted_default <- ifelse(model$fitted.values > 0.01, 1, 0)
confusionMatrix(as_factor(data$predicted_default), as_factor(data$default), positive = "1")
ggplot(data, mapping = aes(balance, fill = as_factor(predicted_default))) +
geom_histogram(alpha=0.6)
