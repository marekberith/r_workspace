)
barplot(
tabulkaH$pravdepodobnost,
main = 'Hypergeometricke rozdelenie',
names.arg = xH,
xlab = 'hodnota',
ylab = 'pravdepodobnost',
col = 'blue'
)
,
barplot(
tabulkaH$pravdepodobnost,
main = 'Hypergeometricke rozdelenie',
names.arg = xH,
xlab = 'hodnota',
ylab = 'pravdepodobnost',
col = 'blue',
ylim = c(0,0.4)
)
barplot(
tabulkaH$pravdepodobnost,
main = 'Hypergeometricke rozdelenie',
names.arg = xH,
xlab = 'hodnota',
ylab = 'pravdepodobnost',
col = 'blue',
ylim = c(0,0.4)
)
# nakreslite empiricku distribucnu funkciu pomocou nasimulovanych dat 10 000
data <- rhyper(10000, m, n, k)
plot(ecdf(data), main = 'Empiricka distribucna funkcia')
#prva uloha
dpois(1, 5)
dpois(0, 5/3)
#tretia uloha
ppois(9, 10/3, lower.tail = F)
# Uvazujme casovy okamih 1 hodinu, urcte maximalny pocet ludi, ktori navstivia
# linku s pravdepodobnostou 90% (na linku pride max. tolko ludi) .. zarucujeme
# sa, ze na 90% tolko pride
qpois(0.9, 20)
# zostrojte tabulku a graf rozdelenia pravdepodobnosti
# pre interval 1 hodina a prvych 40 hodnot
xP <- 0:40 # viem zodpovedat ani jednu az vsetkych 5 otazok
hustotaP <- dpois(xP, 20)
tabulkaP <- data.frame(hodnota = xP, pravdepodobnost = hustotaP)
tabulkaP
barplot(
tabulkaP$pravdepodobnost,
main = 'Poissonovo rozdelenie',
names.arg = xP,
xlab = 'hodnota',
ylab = 'pravdepodobnost',
col = 'red'
#ylim = c(0,0.4)
)
barplot(
tabulkaP$pravdepodobnost,
main = 'Poissonovo rozdelenie',
names.arg = xP,
xlab = 'hodnota',
ylab = 'pravdepodobnost',
col = 'red',
ylim = c(0,0.4)
)
barplot(
tabulkaP$pravdepodobnost,
main = 'Poissonovo rozdelenie',
names.arg = xP,
xlab = 'hodnota',
ylab = 'pravdepodobnost',
col = 'red',
ylim = c(0,0.15)
)
# prva uloha
pnorm(7.5, mean = 8, sd = 2)
# druha uloha
# na dva kroky, najskor spocitam po a potom odcitam
pnorm(9, mean = 8, sd = 2) - pnorm(7, mean = 8, sd = 2)
#tretia uloha
pnorm(10, mean = 8, sd = 2, lower.tail = F)
# nakreslime histogram nasimulovanych dat, N(0, 1), prelozime hustotu cez histogram
xx <- rnorm(500)
xx
# nakreslime histogram nasimulovanych dat, N(0, 1), prelozime hustotu cez histogram
xx <- rnorm(500, mean = 0, sd = 1)
hist(xx)
xxx <- seq(-3, 3, 0.01) # pre kreslenie hustoty
hist(xx, freq = F)
lines(xxx, dnorm())
lines(xxx, dnorm(xxx, 0, 1), col = 'blue')
# Zivotnost zariadenia, doba do prvej poruchy, doby medzi poruchami,
# jediny parameter lambda, je to prevratena hodnota strednej hodnoty,
# pozor ako to bude v zadani. E(x) = 1 / lambda
# Priklad
# Dlzka zivotnosti pouzivaneho PC v pocitacovej ucebni je 2 roky
# Vypocitajte PC ma zivotnost aspon 1 rok P(X >= 1)
# PC ma zivotnost najviac % rokov P(X <= 5)
# Za aku zivotnost by ste sa zarucili s pravdepodobnostou 5%, p = 0.05
# parameter je 1/2
# Uloha 1
pexp(1, rate = 1/2, lower.tail = F)
# Uloha 2
pexp(5, rate = 1/2)
# Uloha 3
qexp(0.05, rate = 1/2, lower.tail = F)
# Nakreslite histogram, prelozte hustotu
xx <- rexp(500, rate = 1/2) # pre histogram
xxx <- seq(0, 5, 0.01) # pre kreslenie hustoty
hist(xx, freq = F) # freq F na zmenu mierky na pravdepodobnostnu
lines(xxx, dexp(xxx, rate = 1/2), col = 'yellow')
lines(xxx, dexp(xxx, rate = 1/2), col = 'purple')
x <- 1:10
x
attributes(x)
rownames(x)
colnames(x)
y <- dim(x)
y
dim(x)
dim(x)
dim(x) <- c(2, 6)
dim(x) <- c(2, 5)
x
dim(x) <- c(5, 2)
x
dim(x) <- c(2, 5)
x
dimnames(x) <- list(c('a', 'b'), c('c', 'd', 'e', 'f', 'g', 'h'))
dimnames(x) <- list(c('a', 'b'), c('c', 'd', 'e', 'f', 'g'))
x
attributes(x)
dim(x) <- c(5, 2)
x
attributes(x)
dimnames(x) <- list(c('a', 'b'), c('c', 'd', 'e', 'f', 'g'))
dimnames(x) <- list(c('c', 'd', 'e', 'f', 'g'), c('a', 'b'))
x
m <- matrix(ncol = 5)
m
m <- matrix(ncol = 5, byrow = TRUE)
m
m <- matrix(ncol = 5, byrow = F)
m
m <- rbind(m, rnorm(n = 5))
m
m <- rbind(m, rnorm(n = 5, mean = i))
m <- rbind(m, rnorm(n = 5, mean = i));
for (i in 1:7)
m <- rbind(m, rnorm(n = 5, mean = i));
m
n <- matrix(nrow = 7)
n
for(n in 1:20)
n <- cbind(n, i:i+7);
n
n <- matrix(nrow = 7)
n
for(i in 1:20)
n <- cbind(n, i:i+7);
n
for(i in 1:10)
n <- cbind(n, i:i+7);
n
n <- matrix(nrow = 7)
n
for(i in 1:10)
n <- cbind(n, i:i+7);
n
for(i in 1:10)
n <- cbind(n, i:(i+7));
n
n <- matrix(nrow = 7)
n
for(i in 1:10)
n <- cbind(n, i:(i+7));
n
n <- matrix(nrow = 7)
n
for(i in 1:10)
n <- cbind(n, (i+1):(i+7));
n
n <- matrix(nrow = 7)
n
for(i in 1:10)
n <- cbind(n, i:(i+7));
n
n <- matrix(nrow = 7)
n
for(i in 1:10)
n <- cbind(n, i:(i+6));
n
# byrow specifies how should be matrix filled
m <- matrix(ncol = 5, byrow = F)
m
set.seed(123)
for(i in 1:7)
m <- rbind(m, rnorm(n = 5, mean = i));
m
n <- matrix(nrow = 7)
n
for(i in 1:10)
n <- cbind(n, i:(i+6));
n
n[5]
n[5, 5]
n[5,]
n[>5,]
typeof(n)
class(n)
m
dim(m) <- NULL
m
attributes(m)
m
help('array')
mm <- array(m, dim = c(5, 7))
mm
mm <- array(m, dim = c(8, 5))
mm
class(mm)
m
m[1, 2]
m[2, ]
m
m[2]
m[2:5]
m[2:6]
mmm <- matrix(m, c(7, 5))
mmm <- matrix(m, c(8, 5))
mmm
mmm[1,]
mmm[2,]
help(loops)
help(loop)
help('for')
m
class(mm)
m
for i in 1:5
for (i in 1:5)
for(i in 1:5)
m
m
for(i in 1:5)
for(ii in 1:3)
m[ii]
for(i in 1:5)
for(ii in 1:3)
print(m[ii])
m_clean <- m[is.na(m)]
m_clean
m_clean <- m[!is.na(m)]
m_clean
help('rbind')
for(i in 1:5)
if(i == 1)
m_new <- m_clean[1:3]
else
help('for')
for(i in 1:5){
if(i == 1)
m_new <- m_clean[1:3]
else
rbind(m_new, m_clean[i*3-2, i*3])
}
for(i in 1:5){
if(i == 1)
m_new <- m_clean[1:3]
else
rbind(m_new, m_clean[i*3-2, i*3])
}
for(i in 1:5){
if(i == 1)
m_new <- m_clean[1:3]
else
rbind(m_new, m_clean[(i*3-2):(i*3)])
}
m_new
for(i in 1:5){
if(i == 1){
m_new <- m_clean[1:3]
}
else{
rbind(m_new, m_clean[(i*3-2):(i*3)])
}
}
m_new
m_clean
for(i in 1:5){
if(i == 1)
m_new <- m_clean[1:3]
else
m_new <- rbind(m_new, m_clean[(i*3-2):(i*3)])
}
m_new
workdir()
getwd()
setwd('C:/R/workspace')
data <- read_excel('statistika/dataE.xlsx')
data <- read_xlsx('statistika/dataE.xlsx')
library('readxl')
data <- read_excel('statistika/dataE.xlsx')
data
# Prvotna statisticka analyza dat
# Uzitocne prikazy pri predpriprave dat
View(data)
dim(data)
str(data)
head(data)
head(data, 3) # ina struktura dat, prvych x
library(Amelia)
install.packages("Amelia")
library(Amelia)
missmap(data) # aby sme pozreli, ktore data chybaju
missmap(airquality)
airquality$Ozone
aa <- na.omit(airquality)
missmap(aa)
# vhodne kniznice na analyzu
library(psych)
# vhodne kniznice na analyzu
install.packages('psych')
library(Hmisc)
install.packages('Hmisc')
# vhodne kniznice na analyzu
install.packages('psych')
install.packages('FSA')
install.packages('pastecs')
install.packages('moments')
library(psych)
library(Hmisc)
library(FSA)
library(pastesc)
install.packages('pastesc')
library(pastecs)
# Charakteristiky polohy pre stlpec mprij
plat <- data$mprij
min(plat)
max(plat)
mean(plat)
median(plat)
median(plat)
modus(plat)
mode(plat)
find_mode <- function(x){
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
find_mode(plat)
quantile(plat)
quantile(plat, 0.5) # median
quantile(plat, 0.1) # 10% je do toho cisla
# prikazy pre harmonicky a geometricky priemer
harmonic.mean(plat)
geometric.mean(plat)
# ine uzitocne prikazy
sort(plat)
# ine uzitocne prikazy
sort(plat, -1)
# ine uzitocne prikazy
sort(plat,decreasing = T)
(sort(plat)[25] + sort(plat)[26])/2
# sucet ludi s danou vlastnostou
sum(data$pohlavie == 'z')
sum(data$vek <= 40)
sum(data$mprij > 1000)
# Tabulka pocetnosti a relativnych pocetnosti
table(plat)
plot(plat)
histogram(plat)
histogram(plat, col = 'red')
prop.table(plat)
cumsum(plat)
# Charakteristiky rozptylu
max(plat) - min(plat) # variacne rozpatie
range(plat)
var(plat)
var(plat) # odhad disperzie
sd(plat)
IQR(plat)
iqr(plat)
IQR(plat)
IQR(plat) / 2
# mame charakteristiky take, ze mozeme zistit, ci su v datovom subore
# vybocujuce hodnoty -> outliers
mean(plat) + 3 * c(-sd(plat), sd(plat))
# mame charakteristiky take, ze mozeme zistit, ci su v datovom subore
# vybocujuce hodnoty -> outliers
mean(plat) + 1.5 * c(-sd(plat), sd(plat)) # pravidlo 3 sigma
# mame charakteristiky take, ze mozeme zistit, ci su v datovom subore
# vybocujuce hodnoty -> outliers
mean(plat) + 3 * c(-sd(plat), sd(plat)) # pravidlo 3 sigma
quantile(plat, 0.75) + 1.5 * IQR(plat) # horna hranica
# hodnotu 1950 mozno pri tejto metode povazovat za vybocujucu
# Sikmost a spicatost
# prikazy su vo viacerych knizniciach, pouzit moments
skewness(plat)
library(moments)
# hodnotu 1950 mozno pri tejto metode povazovat za vybocujucu
# Sikmost a spicatost
# prikazy su vo viacerych knizniciach, pouzit moments
skewness(plat)
skew(plat)
hist(plat) # vizualne overim
hist(plat) # vizualne overim
hist(plat) # vizualne overim
View(hist(plat)) # vizualne overim
hist(plat) #vizualne overim
plot(density(plat))
kurtosis(plat)
kurtosi(plat)
# nasimulujeme data symetricke a sice N(0, 1) a data nesymeytricke
# z rozdelenia Chi kvadrat, spocitame sikmost a spicatost
s1 <- rnorm(100)
s1
s2 <- rchi(100, 5)
s2 <- rchisq(100, 5)
skewness(s1)
skewness(s2)
kurtosis(s1)
kurtosis(s2)
par(mfrow=c(1, 2))
plot(density(s1))
plot(density(s1))
plot(density(s2))
plot(density(s1))
plot(density(s2))
par(mfrow=c(1, 2))
par(mfrow=c(1, 2))
plot(density(s1))
plot(density(s2))
# sumarne statistiky
describe(plat)
# sumarne statistiky
describe(plat)
stat.desc(plat)
Summarize(plat)
# vypocet charakteristik na podmnozinach danej mnoziny,
# podla deliaceho faktoru (nejakeho zvoleneho)
tapply(data$mprij, data$pohlavie, mean)
tapply(data$mprij, data$pohlavie, describe)
tapply(data$mprij, data$pohlavie, describe)
tapply(data$mprij, data$vzdelanie)
tapply(data$mprij, data$vzdelanie, mean)
library(ggplot2)
mtcars
library(car)
library(carData)
library(MASS)
library(RColorBrewer)
library(vioplot)
package.install('vioplot')
packages.install('vioplot')
install.packages('vioplot')
library(vioplot)
# histogramy, krabicove boxplot grafy, huslove grafy
# grafy
par(mfrow = c(1, 1)) # rozdelit okno grafov na 1 cast
hist(plat)
histogram(plat)
hist(plat)
histogram(plat)
# to kvoli roznej dlzke tried
hist(plat, breaks = 'Sturges')
# to kvoli roznej dlzke tried
hist(plat, breaks = 'Sturges', main = 'Histogram')
# to kvoli roznej dlzke tried
hist(plat, breaks = 'Sturges', main = 'Histogram', ylabel = 'pocetnosti')
# to kvoli roznej dlzke tried
hist(plat, breaks = 'Sturges', main = 'Histogram', ylab = 'pocetnosti')
par(mfrow = c(1, 2))
muzi <- subset(data$mprij, data$pohlavie == 'm')
zeny <- subset(data$mprij, data$pohlavie == 'z')
hist(muzi)
hist(zeny)
hist(muzi, ylim = c(0, 12))
hist(zeny, ylim = c(0, 12))
# alebo inak, druha moznost
hist(data$mprij~data$pohlavie)
# alebo inak, druha moznost
hist(data$mprij~data$pohlavie~data$vzdelanie)
# Krabicove grafy - boxploty
boxplot(plat)
boxplot(data$mprij ~ data$pohlavie, col = c('blue', 'red'))
# alebo inak, druha moznost
hist(data$mprij~data$pohlavie)
# histogramy, krabicove boxplot grafy, huslove grafy
# grafy
par(mfrow = c(1, 1)) # rozdelit okno grafov na 1 cast
boxplot(data$mprij ~ data$pohlavie, col = c('blue', 'red'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'green'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Green'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'blue'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Blue'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Greens'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'greens'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Greens'))
boxplot = (data$mprij~data$pohlavie + data$vzdelanie)
boxplot(data$mprij~data$pohlavie + data$vzdelanie, col = c('blue', 'red'))
# Huslove grafy - vioplot
vioplot(plat)
vioplot(data$mprij ~ data$pohlavie, col = c('blue', 'red'))
vioplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Greens'))
vioplot(data$mprij~data$pohlavie + data$vzdelanie, col = c('blue', 'red'))
par(mfrow = c(1, 2))
# Krabicove grafy - boxploty
boxplot(plat)
# Huslove grafy - vioplot
vioplot(plat)
boxplot(data$mprij~data$pohlavie + data$vzdelanie, col = c('blue', 'red'))
vioplot(data$mprij~data$pohlavie + data$vzdelanie, col = c('blue', 'red'))
