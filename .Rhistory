}
m_new
workdir()
getwd()
setwd('C:/R/workspace')
data <- read_excel('statistika/dataE.xlsx')
data <- read_xlsx('statistika/dataE.xlsx')
library('readxl')
data <- read_excel('statistika/dataE.xlsx')
data
# Prvotna statisticka analyza dat
# Uzitocne prikazy pri predpriprave dat
View(data)
dim(data)
str(data)
head(data)
head(data, 3) # ina struktura dat, prvych x
library(Amelia)
install.packages("Amelia")
library(Amelia)
missmap(data) # aby sme pozreli, ktore data chybaju
missmap(airquality)
airquality$Ozone
aa <- na.omit(airquality)
missmap(aa)
# vhodne kniznice na analyzu
library(psych)
# vhodne kniznice na analyzu
install.packages('psych')
library(Hmisc)
install.packages('Hmisc')
# vhodne kniznice na analyzu
install.packages('psych')
install.packages('FSA')
install.packages('pastecs')
install.packages('moments')
library(psych)
library(Hmisc)
library(FSA)
library(pastesc)
install.packages('pastesc')
library(pastecs)
# Charakteristiky polohy pre stlpec mprij
plat <- data$mprij
min(plat)
max(plat)
mean(plat)
median(plat)
median(plat)
modus(plat)
mode(plat)
find_mode <- function(x){
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
find_mode(plat)
quantile(plat)
quantile(plat, 0.5) # median
quantile(plat, 0.1) # 10% je do toho cisla
# prikazy pre harmonicky a geometricky priemer
harmonic.mean(plat)
geometric.mean(plat)
# ine uzitocne prikazy
sort(plat)
# ine uzitocne prikazy
sort(plat, -1)
# ine uzitocne prikazy
sort(plat,decreasing = T)
(sort(plat)[25] + sort(plat)[26])/2
# sucet ludi s danou vlastnostou
sum(data$pohlavie == 'z')
sum(data$vek <= 40)
sum(data$mprij > 1000)
# Tabulka pocetnosti a relativnych pocetnosti
table(plat)
plot(plat)
histogram(plat)
histogram(plat, col = 'red')
prop.table(plat)
cumsum(plat)
# Charakteristiky rozptylu
max(plat) - min(plat) # variacne rozpatie
range(plat)
var(plat)
var(plat) # odhad disperzie
sd(plat)
IQR(plat)
iqr(plat)
IQR(plat)
IQR(plat) / 2
# mame charakteristiky take, ze mozeme zistit, ci su v datovom subore
# vybocujuce hodnoty -> outliers
mean(plat) + 3 * c(-sd(plat), sd(plat))
# mame charakteristiky take, ze mozeme zistit, ci su v datovom subore
# vybocujuce hodnoty -> outliers
mean(plat) + 1.5 * c(-sd(plat), sd(plat)) # pravidlo 3 sigma
# mame charakteristiky take, ze mozeme zistit, ci su v datovom subore
# vybocujuce hodnoty -> outliers
mean(plat) + 3 * c(-sd(plat), sd(plat)) # pravidlo 3 sigma
quantile(plat, 0.75) + 1.5 * IQR(plat) # horna hranica
# hodnotu 1950 mozno pri tejto metode povazovat za vybocujucu
# Sikmost a spicatost
# prikazy su vo viacerych knizniciach, pouzit moments
skewness(plat)
library(moments)
# hodnotu 1950 mozno pri tejto metode povazovat za vybocujucu
# Sikmost a spicatost
# prikazy su vo viacerych knizniciach, pouzit moments
skewness(plat)
skew(plat)
hist(plat) # vizualne overim
hist(plat) # vizualne overim
hist(plat) # vizualne overim
View(hist(plat)) # vizualne overim
hist(plat) #vizualne overim
plot(density(plat))
kurtosis(plat)
kurtosi(plat)
# nasimulujeme data symetricke a sice N(0, 1) a data nesymeytricke
# z rozdelenia Chi kvadrat, spocitame sikmost a spicatost
s1 <- rnorm(100)
s1
s2 <- rchi(100, 5)
s2 <- rchisq(100, 5)
skewness(s1)
skewness(s2)
kurtosis(s1)
kurtosis(s2)
par(mfrow=c(1, 2))
plot(density(s1))
plot(density(s1))
plot(density(s2))
plot(density(s1))
plot(density(s2))
par(mfrow=c(1, 2))
par(mfrow=c(1, 2))
plot(density(s1))
plot(density(s2))
# sumarne statistiky
describe(plat)
# sumarne statistiky
describe(plat)
stat.desc(plat)
Summarize(plat)
# vypocet charakteristik na podmnozinach danej mnoziny,
# podla deliaceho faktoru (nejakeho zvoleneho)
tapply(data$mprij, data$pohlavie, mean)
tapply(data$mprij, data$pohlavie, describe)
tapply(data$mprij, data$pohlavie, describe)
tapply(data$mprij, data$vzdelanie)
tapply(data$mprij, data$vzdelanie, mean)
library(ggplot2)
mtcars
library(car)
library(carData)
library(MASS)
library(RColorBrewer)
library(vioplot)
package.install('vioplot')
packages.install('vioplot')
install.packages('vioplot')
library(vioplot)
# histogramy, krabicove boxplot grafy, huslove grafy
# grafy
par(mfrow = c(1, 1)) # rozdelit okno grafov na 1 cast
hist(plat)
histogram(plat)
hist(plat)
histogram(plat)
# to kvoli roznej dlzke tried
hist(plat, breaks = 'Sturges')
# to kvoli roznej dlzke tried
hist(plat, breaks = 'Sturges', main = 'Histogram')
# to kvoli roznej dlzke tried
hist(plat, breaks = 'Sturges', main = 'Histogram', ylabel = 'pocetnosti')
# to kvoli roznej dlzke tried
hist(plat, breaks = 'Sturges', main = 'Histogram', ylab = 'pocetnosti')
par(mfrow = c(1, 2))
muzi <- subset(data$mprij, data$pohlavie == 'm')
zeny <- subset(data$mprij, data$pohlavie == 'z')
hist(muzi)
hist(zeny)
hist(muzi, ylim = c(0, 12))
hist(zeny, ylim = c(0, 12))
# alebo inak, druha moznost
hist(data$mprij~data$pohlavie)
# alebo inak, druha moznost
hist(data$mprij~data$pohlavie~data$vzdelanie)
# Krabicove grafy - boxploty
boxplot(plat)
boxplot(data$mprij ~ data$pohlavie, col = c('blue', 'red'))
# alebo inak, druha moznost
hist(data$mprij~data$pohlavie)
# histogramy, krabicove boxplot grafy, huslove grafy
# grafy
par(mfrow = c(1, 1)) # rozdelit okno grafov na 1 cast
boxplot(data$mprij ~ data$pohlavie, col = c('blue', 'red'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'green'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Green'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'blue'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Blue'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Greens'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'greens'))
boxplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Greens'))
boxplot = (data$mprij~data$pohlavie + data$vzdelanie)
boxplot(data$mprij~data$pohlavie + data$vzdelanie, col = c('blue', 'red'))
# Huslove grafy - vioplot
vioplot(plat)
vioplot(data$mprij ~ data$pohlavie, col = c('blue', 'red'))
vioplot(data$mprij ~ data$vzdelanie, col = brewer.pal(3, 'Greens'))
vioplot(data$mprij~data$pohlavie + data$vzdelanie, col = c('blue', 'red'))
par(mfrow = c(1, 2))
# Krabicove grafy - boxploty
boxplot(plat)
# Huslove grafy - vioplot
vioplot(plat)
boxplot(data$mprij~data$pohlavie + data$vzdelanie, col = c('blue', 'red'))
vioplot(data$mprij~data$pohlavie + data$vzdelanie, col = c('blue', 'red'))
#task 1
data <- read.csv('data\\Practicum.4.2.csv')
library('tidyverse')
library('tidymodels')
library('magrittr')
cric <- modeldata::crickets
model <- summary(lm(data = cric, formula = rate ~ temp + species))
model <- crickets %$% summary(lm(rate ~ temp + species))
model
broom::tidy(model)
#nefunguje?
broom::augment(model)
#task 4
summary(model)
#task 1
data <- read.csv('data\\Practicum.4.2.csv')
head(data)
class(data)
typeof(data)
cleaned_data <- data %>%
filter(grepl('CAM,', player_positions)) %>%
pivot_wider(names_from = skill, values_from = Value)
cleaned_data <- data %>%
filter(grepl('CAM,', player_positions)) %>%
pivot_wider(names_from = Skill, values_from = Value)
View(cleaned_data)
cleaned_data <- data %>%
filter(grepl('CM,', player_positions)) %>%
pivot_wider(names_from = Skill, values_from = Value)
View(cleaned_data)
cleaned_data <- data %>%
filter(player_positions == 'CM') %>%
pivot_wider(names_from = Skill, values_from = Value)
View(cleaned_data)
#task 2
model <- cleaned_data %$% lm(formula = wage_eur ~ skill_dribbling + skill_curve + preferred_foot)
summary(model)
#task 3 - check for heteroscedasticity
qqline(model$resid)
plot(model$resid ~ model$fitted.values)
plot(cooks.distance(model))
shapiro.test(model$resid)
boxplot(model$residuals)
#task 4
summary(model)
#task 5
pairs(model)
#task 5
pairs(cleaned_data)
#task 5
pairs(cleaned_data$skill_dribbling, cleaned_data$skill_curve)
#task 5
pairs(c(cleaned_data$skill_dribbling, cleaned_data$skill_curve))
#task 5
pairs(as.data.frame(c(cleaned_data$skill_dribbling, cleaned_data$skill_curve)))
#task 5
cleaned_data
pairs(data.frame(c(cleaned_data$skill_dribbling, cleaned_data$skill_curve)))
k<-data.frame(c(cleaned_data$skill_dribbling, cleaned_data$skill_curve))
k
head(k)
#task 5
cleaned_data
k<-as.tibble(c(cleaned_data$skill_dribbling, cleaned_data$skill_curve))
k<-as_tibble(c(cleaned_data$skill_dribbling, cleaned_data$skill_curve))
head(k)
columns_to_plot <- c('skill_dribbling', 'skill_curve')
pairs(cleaned_data[, columns_to_plot])
#task 6
#we need to use * instead of + to make model with interactions
interaction_model <- cleaned_data %$%
lm(formula = wage_eur ~ skill_dribbling * skill_curve + preferred_foot)
summary(interaction_model)
#task 7
summary(interaction_model)
#task 7
summary(model)
summary(interaction_model)
model$coefficients
model$coefficients
interaction_model$coefficients
#task 6
#we need to use * instead of + to make model with interactions
interaction_model <- cleaned_data %$%
lm(formula = wage_eur ~ (skill_dribbling * skill_curve) + preferred_foot)
#task 7
summary(model)
summary(interaction_model)
model$coefficients
interaction_model$coefficients
#task 7
all_interaction_model <- cleaned_data %$%
lm(formula = wage_eur ~ (skill_dribbling + skill_curve + preferred_foot)^2)
summary(all_interaction_model)
summary(interaction_model)
#task 6
summary(model)
plot(cleaned_data$wage_eur, cleaned_data$skill_dribbling)
plot(cleaned_data$skill_dribbling, cleaned_data$wage_eur)
abline(model, col = "blue")
abline(interaction_model, col = "blue")
plot(cleaned_data$skill_dribbling, cleaned_data$wage_eur)
abline(interaction_model, col = "blue")
plot(cleaned_data$skill_dribbling, cleaned_data$wage_eur, cleaned_data$skill_curve)
plot(cleaned_data$skill_dribbling, cleaned_data$wage_eur)
abline(interaction_model, col = "blue")
abline(all_interaction_model, col = "blue")
plot(cleaned_data$skill_dribbling, cleaned_data$wage_eur)
abline(model, col = "blue")
abline(interaction_model, col = "red")
abline(all_interaction_model, col = "green")
abline(all_interaction_model, col = "green")
library('tidyverse')
library('tidymodels')
library('magrittr')
cric <- modeldata::crickets
model <- summary(lm(data = cric, formula = rate ~ temp + species))
model <- crickets %$% summary(lm(rate ~ temp + species))
model
broom::tidy(model)
#nefunguje?
broom::augment(model)
class(model)
library('ggfortify')
autoplot(model, which = c(1,2,5)) + theme_bw()
head(data)
class(data)
typeof(data)
cleaned_data <- data %>%
filter(player_positions == 'CM') %>%
pivot_wider(names_from = Skill, values_from = Value)
View(cleaned_data)
#task 2
model <- cleaned_data %$% lm(formula = wage_eur ~ skill_dribbling + skill_curve + preferred_foot)
summary(model)
#task 3 - check for heteroscedasticity
qqline(model$resid)
plot(model$resid ~ model$fitted.values)
plot(cooks.distance(model))
shapiro.test(model$resid)
boxplot(model$residuals)
#task 4
summary(model)
#task 5
cleaned_data
columns_to_plot <- c('skill_dribbling', 'skill_curve')
pairs(cleaned_data[, columns_to_plot])
#we need to use * instead of + to make model with interactions
interaction_model <- cleaned_data %$%
lm(formula = wage_eur ~ (skill_dribbling * skill_curve) + preferred_foot)
#task 6
summary(model)
summary(interaction_model)
model$coefficients
interaction_model$coefficients
#task 7
all_interaction_model <- cleaned_data %$%
lm(formula = wage_eur ~ (skill_dribbling + skill_curve + preferred_foot)^2)
summary(all_interaction_model)
plot(cleaned_data$skill_dribbling, cleaned_data$wage_eur)
abline(model, col = "blue")
abline(interaction_model, col = "red")
abline(all_interaction_model, col = "green")
plot(cleaned_data$skill_curve, cleaned_data$wage_eur)
abline(model, col = "blue")
abline(interaction_model, col = "red")
abline(all_interaction_model, col = "green")
cleaned_data <- data %>%
filter(player_positions == 'CM' && wage_eure < 50000) %>%
pivot_wider(names_from = Skill, values_from = Value)
cleaned_data <- data %>%
filter(player_positions == 'CM' && wage_eur < 50000) %>%
pivot_wider(names_from = Skill, values_from = Value)
cleaned_data <- data %>%
filter(player_positions == 'CM' & wage_eur < 50000) %>%
pivot_wider(names_from = Skill, values_from = Value)
View(cleaned_data)
#task 2
model <- cleaned_data %$% lm(formula = wage_eur ~ skill_dribbling + skill_curve + preferred_foot)
summary(model)
#task 3 - check for heteroscedasticity
qqline(model$resid)
plot(model$resid ~ model$fitted.values)
plot(cooks.distance(model))
shapiro.test(model$resid)
boxplot(model$residuals)
#task 4
summary(model)
#task 5
cleaned_data
columns_to_plot <- c('skill_dribbling', 'skill_curve')
pairs(cleaned_data[, columns_to_plot])
#we need to use * instead of + to make model with interactions
interaction_model <- cleaned_data %$%
lm(formula = wage_eur ~ (skill_dribbling * skill_curve) + preferred_foot)
#task 6
summary(model)
summary(interaction_model)
model$coefficients
interaction_model$coefficients
#task 7
all_interaction_model <- cleaned_data %$%
lm(formula = wage_eur ~ (skill_dribbling + skill_curve + preferred_foot)^2)
summary(all_interaction_model)
plot(cleaned_data$skill_curve, cleaned_data$wage_eur)
abline(model, col = "blue")
abline(interaction_model, col = "red")
abline(all_interaction_model, col = "green")
#task 1
data <- read.csv('data\\Practicum.4.2.csv')
head(data)
class(data)
typeof(data)
cleaned_data <- data %>%
filter(player_positions == 'CM') %>%
pivot_wider(names_from = Skill, values_from = Value)
View(cleaned_data)
#task 2
model <- cleaned_data %$% lm(formula = wage_eur ~ skill_dribbling + skill_curve + preferred_foot)
summary(model)
#task 3 - check for heteroscedasticity
qqline(model$resid)
plot(model$resid ~ model$fitted.values)
plot(cooks.distance(model))
shapiro.test(model$resid)
boxplot(model$residuals)
#task 4
summary(model)
#task 5
cleaned_data
columns_to_plot <- c('skill_dribbling', 'skill_curve')
pairs(cleaned_data[, columns_to_plot])
#we need to use * instead of + to make model with interactions
interaction_model <- cleaned_data %$%
lm(formula = wage_eur ~ (skill_dribbling * skill_curve) + preferred_foot)
#task 6
summary(model)
summary(interaction_model)
model$coefficients
interaction_model$coefficients
#task 7
all_interaction_model <- cleaned_data %$%
lm(formula = wage_eur ~ (skill_dribbling + skill_curve + preferred_foot)^2)
summary(all_interaction_model)
plot(cleaned_data$skill_curve, cleaned_data$wage_eur)
abline(model, col = "blue")
abline(interaction_model, col = "red")
abline(all_interaction_model, col = "green")
#task 8
poly_model <- cleaned_data %$%
lm(formula = wage_eur ~ poly(skill_dribbling))
summary(poly_model)
#task 8
poly_model <- cleaned_data %$%
lm(formula = wage_eur ~ poly(skill_dribbling, degree = 3))
summary(poly_model)
abline(poly_model, col = 'purple')
#task 8
poly_model <- cleaned_data %$%
lm(formula = wage_eur ~ poly(skill_dribbling, degree = 3))
# test
plot(cleaned_data$skill_dribbling, cleaned_data$wage_eur)
abline(model, col = "blue")
abline(interaction_model, col = "red")
abline(all_interaction_model, col = "green")
#task 8
poly_model <- cleaned_data %$%
lm(formula = wage_eur ~ poly(skill_dribbling, degree = 3))
summary(poly_model)
abline(poly_model, col = 'purple')
# test
plot(cleaned_data$skill_dribbling, cleaned_data$wage_eur)
abline(poly_model, col = 'purple')
degree_five_model <- cleaned_data %$%
lm(formula = wage_eur ~ poly(skill_dribbling, degree = 5))
summary(degree_five_model)
#task 9
res_sum_model <- sum(model$residuals)
res_sum_model
model$residuals
#task 9
res_sum_model <- sum(model$residuals^2)
res_sum_model
res_sum_five_model <- sum(degree_five_model$residuals^2)
res_sum_five_model
res_sum_three_model <- sum(poly_model$residuals^2)
res_sum_three_model
#task 10
library('ggplot2')
geom(poly_model)
geoms(poly_model)
#task 10
library('ggplot2')
