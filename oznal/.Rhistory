install.packages('rtools')
install.packages('Rtools')
library(rsample)
folds <- vfold_cv(df_grouped, v = 5)
print(folds)
training_data <- training(folds)
update.packages(oldPkgs="rsample", ask=FALSE)
library(tidyverse)
library(tidymodels)
library(magrittr)
options(scipen=999)
tidymodels_prefer() # resolve package conflicts using tidy models methods
data(ames)
hist(x = ames$Sale_Price, freq = F, breaks = 50)
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
# stratified sampling, which is more complex than random sampling
set.seed(502)
ames_split <- initial_split(ames, prop = 0.8, strata = Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
# tasks
# task 1
df <- read_csv('../data/Practicum.5.1.csv')
hist(df$Sale_Price, breaks = 100)
# task 2
df_grouped <- df %>%
group_by(ID, Sale_Price) %>%
summarise(SF_total = sum(Value_SF))
df_grouped
# task 3
pairs(df_grouped)
library(rsample)
folds <- vfold_cv(df_grouped, v = 5)
print(folds)
training_data <- training(folds)
library(tidyverse)
library(tidymodels)
library(magrittr)
tidymodels_prefer() # resolve package conflicts using tidy models methods
data(ames)
hist(x = ames$Sale_Price, freq = F, breaks = 50)
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
# tasks
# task 1
df <- read_csv('../data/Practicum.5.1.csv')
hist(df$Sale_Price, breaks = 100)
# task 2
df_grouped <- df %>%
group_by(ID, Sale_Price) %>%
summarise(SF_total = sum(Value_SF))
df_grouped
# task 3
pairs(df_grouped)
library(rsample)
folds <- vfold_cv(df_grouped, v = 5)
print(folds)
training_data <- training(folds)
print(folds)
fold1 <- analysis(folds, 1)
folds <- vfold_cv(df_grouped, v = 5)
training_data <- training(folds)
print(folds)
fold1 <- as.data.frame(folds$splits[[1]])
fold1
print(folds)
fold1
print(folds)
print(folds$splits)
print(folds)
print(folds[1])
print(folds[,1])
print(folds[1,])
print(training(folds[1,]))
print(training(folds[1,]$splits))
print(folds[1,]$splits)
print(analysis(folds[1,]$splits))
fold_i <- as.data.frame(folds$splits[[1]])
fold_i
train <- training(fold_i)
train <- analysis(fold_i)
fold_i <- as.data.frame(folds$splits[[1]])
train <- analysis(fold_i)
ames_split
ames_split <- initial_split(ames, prop = 0.8, strata = Sale_Price)
ames_split
fold_i
fold_i <- folds$splits[[1]]
fold_i
train <- analysis(fold_i)
train
fold_i
test <- assessment(fold_i)
model <- lm(Sale_price~SF_total, data = train)
model <- lm(Sale_Price~SF_total, data = train)
plot(model)
library(tidyverse)
library(tidymodels)
library(magrittr)
options(scipen=999)
tidymodels_prefer() # resolve package conflicts using tidy models methods
data(ames)
hist(x = ames$Sale_Price, freq = F, breaks = 50)
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
# tasks
# task 1
df <- read_csv('../data/Practicum.5.1.csv')
hist(df$Sale_Price, breaks = 100)
# task 2
df_grouped <- df %>%
group_by(ID, Sale_Price) %>%
summarise(SF_total = sum(Value_SF))
df_grouped
# task 3
pairs(df_grouped)
# task 4
library(rsample)
folds <- vfold_cv(df_grouped, v = 5)
fold_i <- folds$splits[[1]]
fold_i
train <- analysis(fold_i)
test <- assessment(fold_i)
model <- lm(Sale_Price~SF_total, data = train)
plot(model)
plot(model)
plot(model)
plot(model)
plot(model)
plot(model)
k
k <- plot(model)
k
k <- plot(model)
plot_model(model)
train
train[train$ID in {1, 2, 3}]
train[c(1746, 1745, 1196),]
qqnorm(train)
qqnorm(train$Sale_Price)
qqnorm(train[c(1746, 1745, 1196),]$Sale_Price)
train
qqnorm(train$Sale_Price)
qqplot(train$Sale_Price)
qqPlot(train$Sale_Price)
norm
qqnorm(train$Sale_Price)
train[train$ID = 1746,]
train[train$ID == 1746,]
#task 6
model <- lm(Sale_Price~SF_total, data = folds)
plot(model)
# task 7
coef(model)
#test
coef(lm(Sale_Price~SF_total, data = test))
#' We are predicting Sale_Price. Intercept means constant that is always
#' there and SF_total coeficient means that for every increase of 1 in SF_total,
#' the Sale_Price is increased by value of this coeficient, which in our case
#' is about 51
#test
model_test <- lm(Sale_Price~SF_total, data = test)
coef(model_test)
# task 6
model_train <- lm(Sale_Price~SF_total, data = train)
plot(model_train)
# task 7
#train
coef(model_train)
#test
model_test <- lm(Sale_Price~SF_total, data = test)
coef(model_test)
# task 9
summary(model_train)
summary(model_test)
data <- read.csv('../data/Default.csv')
library(tidyverse)
library(ggplot2)
library(dplyr)
library(magrittr)
data <- read.csv('../data/Default.csv')
data
ggplot(data = data, mapping = aes(x = balance)) +
geom_histogram()
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram()
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(alpha=0.6)
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(y = ..density.., alpha=0.6)
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.6)
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.6) +
geom_density()
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(alpha=0.6) +
geom_density()
ggplot(data = data, mapping = aes(x = density(balance), fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.6)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.6)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(aes(y = ..density..), alpha=0.2)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.2)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
histogram(data[data$default == 'yes']$default)
histplot(data[data$default == 'yes']$default)
hist(data[data$default == 'yes']$default)
hist(data[data$default == 'yes']$balance)
hist(data$balance[data$default == 'yes'])
data[data$default == 'yes']
data[data$default == 'Yes']
data
data[data$default == 'Yes',]
data[data$default == 'Yes',]$balance
hist(data[data$default == 'Yes',]$balance)
hist(data[data$default == 'No',]$balance)
hist(data[data$default == 'Yes',]$balance)
hist(data[data$default == 'No',]$balance)
hist(data[data$default == 'Yes',]$balance)
hist(data[data$default == 'No',]$balance)
hist(data[data$default == 'Yes',]$balance, breaks = 10)
hist(data[data$default == 'Yes',]$balance, breaks = 100)
hist(data[data$default == 'Yes',]$balance, breaks = 50)
hist(data[data$default == 'Yes',]$balance, breaks = 50, col = 'red', alpha = 0.5)
hist(data[data$default == 'Yes',]$balance, breaks = 50, col = 'red')
par(mfrow =c(1,2))
hist(data[data$default == 'Yes',]$balance, breaks = 50, col = 'red')
hist(data[data$default == 'No',]$balance)
hist(data[data$default == 'No',]$balance, breaks = 50)
hist(data[data$default == 'Yes',]$balance, breaks = 50)
hist(data[data$default == 'Yes',]$balance, breaks = 50)
hist(data[data$default == 'No',]$balance, breaks = 50)
data
data$default <- ifelse(data$default == 'No', 0, 1)
data$student <- ifelse(data$student == 'No', 0, 1)
data
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
data
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
data$default <- as.factor(ifelse(data$default == 'No', 0, 1))
data$student <- as.factor(ifelse(data$student == 'No', 0, 1))
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
data <- read.csv('../data/Default.csv')
data
data$default <- as.factor(ifelse(data$default == 'No', 0, 1))
data$student <- as.factor(ifelse(data$student == 'No', 0, 1))
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
qqnorm(data[data$default == 'Yes',]$balance)
qqplot(data[data$default == 'Yes',]$balance)
qqnorm(data[data$default == 'Yes',]$balance)
qqnorm(data[data$default == 1,]$balance)
qqline()
qqline(data[data$default == 1,]$balance)
qqnorm(data[data$default == 0,]$balance)
qqline(data[data$default == 0,]$balance)
ggplot(data = data, mapping = aes(x = balance, fill = default)) +
geom_histogram(alpha=0.6)
mean(data[data$default == 0,]$balance)
mean(data[data$default == 1,]$balance)
library(MASS)
model <- lda(default ~ balance, data)
summary(model)
model
model
predict(model, data)
lda_predict <- predict(model)
lda_predict
lda_predict$class
library(caret)
confusionMatrix(lda_predict$class, data$default, positive = '1')
c <- confusionMatrix(lda_predict$class, data$default, positive = 1)
c <- confusionMatrix(lda_predict$class, data$default, positive = '0')
c
c$table
lda_matrix <- confusionMatrix(lda_predict$class, data$default)
lda_matrix$table
glm(default ~ balance, data = data)
data
glm(default ~ balance, data = data, family = 'binomial')
model_logistic <- glm(default ~ balance, data = data, family = 'binomial')
predict(model_logistic, data)
predict(model_logistic)
predict(model_logistic)$fitted_values
model_logistic$fitted.values
ifelse(model_logistic$fitted.values < 0.5, 0, 1)
glm_predict <- ifelse(model_logistic$fitted.values < 0.5, 0, 1)
glm_matrix <- confusionMatrix(glm_predict, data$default)
glm_matrix <- confusionMatrix(as.factor(glm_predict), data$default)
glm_matrix$table
lda_table
lda_matrix$table
library(ROCit)
install.packages('ROCit')
library(ROCit)
model_logistic$y
roc <- rocit(class = model_logistic$y,
score = model_logistic$fitted.values)
roc
summary(roc)
roc2 <- rocit(class = model$y,
score = model$fitted.values)
model
model$fitted.values
lda_predict$class
lda_predict
model_logistic$fitted.values
roc2 <- rocit(class = model$y,
score = lda_predict)
lda_predict
model$y
model_logistic$y
roc2 <- rocit(class = lda_predict$class,
score = lda_predict)
lda_predict$class
model_logistic$y
da_predict
lda_predict
lda_predict$class
roc <- rocit(class = model_logistic$y,
score = model_logistic$fitted.values)
summary(roc)
source("D:/skola2022_2023/1letny/r_workspace/oznal/cv7_1_2.R", echo=TRUE)
glm_matrix$table
glm_predict <- ifelse(model_logistic$fitted.values < 0.948, 0, 1)
glm_matrix <- confusionMatrix(as.factor(glm_predict), data$default)
glm_matrix$table
glm_predict <- ifelse(model_logistic$fitted.values < 0.947, 0, 1)
glm_matrix <- confusionMatrix(as.factor(glm_predict), data$default)
glm_matrix$table
roc <- rocit(class = model_logistic$y,
score = model_logistic$fitted.values)
summary(roc)
roc$Cutoff
summary(roc)
roc <- rocit(class = lda_predict$class,
score = data$default)
data
data$default
roc <- rocit(class = lda_predict$class,
score = data$default)
roc <- rocit(class = lda_predict$class,
score = as.integer(data$default))
roc <- rocit(class = model_logistic$y,
score = model_logistic$fitted.values)
roc2 <- rocit(class = lda_predict$class,
score = as.integer(data$default))
summary(roc)
summary(roc2)
library(latex2pdf)
install.packages(latex2pdf)
install.packages('latex2pdf')
library(latex2pdf)
library(latex2pdf)
library('latex2pdf)
library('latex2pdf')
library('latex2pdf')
library('latexspdf')
library('latexpdf')
install.packages('latexpdf')
library('latexpdf')
help(magrittr)
help(dplyr)
browseVignettes(package = "dplyr")
read_xls('../data')
# subset
data[data$student = 1,]$student
# load data
data <- read.csv('../data/Default.csv')
data
# add ID to data using length
data$ID <- 1:length(data$default)
data
data %<>% select(ID, everything())
data %<>% select(ID, everything())
data
# Libraries
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
library(magrittr) #pipes
library(dplyr) #pipes
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
# confusion matrix
library(caret)
# for lda() - linear discriminant analysis
library(MASS)
# for ROC - Area under curve is only important thing
library(ROCit)
data %<>% select(ID, everything())
# add ID to data using length and move ID column as first
data$ID <- 1:length(data$default)
data %<>% select(ID, everything())
# Libraries
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
library(magrittr) #pipes
library(dplyr) #pipes
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
# confusion matrix
library(caret)
# for lda() - linear discriminant analysis
library(MASS)
# for ROC - Area under curve is only important thing
library(ROCit)
data %<>% select(ID, everything())
data
data %<>% select(ID, everything())
data %>% select(ID, everything())
data %>% select(ID)
library(magrittr) #pipes
library(dplyr) #pipes
data %>% select(ID)
data
# load data
data <- read.csv('../data/Default.csv')
data %>% select(ID)
library(dplyr) #pipes
# load data
data <- read.csv('../data/Default.csv')
data %>% select(ID)
# add ID to data using length and move ID column as first
data$ID <- 1:length(data$default)
data %>% select(ID)
data %>% select('ID')
data %>% select(data.ID)
data %>% select(data$ID)
data %>% select(income)
data
data$ID
# predict data with model (data must have same structure [best to use train/test sets])
kk <- cric[1:3,]
cric <- modeldata::crickets
# Ordinary Linear Regression (OLR)
model <- lm(rate ~ temp + species, cric)
summary(model)
# predict data with model (data must have same structure [best to use train/test sets])
kk <- cric[1:3,]
kk %<>% select(!rate)
### Libraries
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
library(magrittr) #pipes
library(dplyr) #pipes
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
# confusion matrix
library(caret)
# for lda() - linear discriminant analysis
library(MASS)
# for ROC - Area under curve is only important thing
library(ROCit)
kk %<>% select(!rate)
kk %<>% select(rate)
kk
kk %>% select(rate)
kk %>% select(species, temp, rate)
library(dplyr) #pipes
cric <- modeldata::crickets
# predict data with model (data must have same structure [best to use train/test sets])
kk <- cric[1:3,]
kk %>% select(species, temp, rate)
# Ordinary Linear Regression (OLR)
model <- lm(rate ~ temp + species, cric)
# predict data with model (data must have same structure [best to use train/test sets])
kk <- cric[1:3,]
kk %<>% select(!rate)
library(magrittr) #pipes
kk %<>% select(!rate)
kk
predict(model, kk)
# plot model
autoplot(model)
# for autoplot of model
library(ggfortify)
# plot model
autoplot(model)
pair(model)
# Plots
library(ggplot2)
### Libraries
# Main libraries for lot of things
library(tidyverse)
library(tidymodels)
pair(model)
library(magrittr) #pipes
library(dplyr) #pipes
# Plots
library(ggplot2)
# for autoplot of model
library(ggfortify)
pair(model)
pairs(model)
